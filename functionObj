#include <iostream>
using namespace std;
struct absValue
{
	float operator()(float f) {
		return f > 0 ? f : -f;
	}
};
int main()
{
	float f = -123.45;
	absValue aObj;
	float abs_f = aObj(f);
	cout << "f = " << f << " abs_f = " << abs_f << endl;
	return 0;
}








// bind example
#include <iostream>     // std::cout
#include <functional>   // std::bind
double my_divide(double x, double y) { return x / y; }
int main() {
    using namespace std::placeholders;    // adds visibility of _1, _2, _3,...
    // binding functions:
    auto fn_five = std::bind(my_divide, 10, 2);               // returns 10/2
    std::cout << fn_five() << '\n';                          // 5
    auto fn_half = std::bind(my_divide, _1, 2);               // returns x/2
    std::cout << fn_half(10) << '\n';                        // 5
    auto fn_invert = std::bind(my_divide, _2, _1);            // returns y/x
    std::cout << fn_invert(10, 2) << '\n';                    // 0.2
    auto fn_rounding = std::bind<int>(my_divide, _1, _2);     // returns int(x/y)
    std::cout << fn_rounding(10, 3) << '\n';                  // 3

    return 0;
}






