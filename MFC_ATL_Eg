#define _AFXDLL
#include <afx.h>    // MFC core header (includes CString)
#include <iostream>
using namespace std;

int main()
{
    // Initialize MFC string
    CString msg(_T("Hello, World from MFC!"));

    // Print using C++ wide output
    wcout << (LPCTSTR)msg << endl;

    return 0;
}






#include <windows.h>
#include <iostream>
using namespace std;
int main() {
    // Initialize COM library
    CoInitialize(NULL);
    // Example: Create a COM object (e.g., Excel, Word, etc.)
    CLSID clsid;
    CLSIDFromProgID(L"Excel.Application", &clsid);
    IUnknown* pUnknown = NULL;
    HRESULT hr = CoCreateInstance(clsid, NULL, CLSCTX_LOCAL_SERVER, IID_IUnknown, (void**)&pUnknown);
    if (SUCCEEDED(hr)) {
        cout << "Excel COM object created!" << endl;
        pUnknown->Release();
    }
    else {
        cout << "Failed to create COM object." << endl;
    }
    // Uninitialize COM library
    CoUninitialize();
    return 0;
}







#include <windows.h>
#include <iostream>
using namespace std;
int main() {
    // Initialize COM library
    CoInitialize(NULL);
    // Example: Create a COM object (e.g., Excel, Word, etc.)
    CLSID clsid;
    CLSIDFromProgID(L"Excels.Application", &clsid);
    IUnknown* pUnknown = NULL;
    HRESULT hr = CoCreateInstance(clsid, NULL, CLSCTX_LOCAL_SERVER, IID_IUnknown, (void**)&pUnknown);
    if (SUCCEEDED(hr)) {
        cout << "Excel COM object created!" << endl;
        pUnknown->Release();
    }
    else {
        cout << "Failed to create COM object." << endl;
    }
    // Uninitialize COM library
    CoUninitialize();
    return 0;
}






#include <windows.h>
#include <iostream>
using namespace std;

HRESULT AutoWrap(int autoType, VARIANT* pvResult, IDispatch* pDisp, LPOLESTR ptName, int cArgs...) {
    va_list marker;
    va_start(marker, cArgs);

    DISPID dispID;
    HRESULT hr = pDisp->GetIDsOfNames(IID_NULL, &ptName, 1, LOCALE_USER_DEFAULT, &dispID);
    if (FAILED(hr)) return hr;

    DISPPARAMS dp = { NULL, NULL, 0, 0 };
    dp.cArgs = cArgs;
    VARIANT* pArgs = new VARIANT[cArgs];
    for (int i = 0; i < cArgs; i++) {
        pArgs[i] = va_arg(marker, VARIANT);
    }
    dp.rgvarg = pArgs;

    DISPID dispidNamed = DISPID_PROPERTYPUT;
    if (autoType & DISPATCH_PROPERTYPUT) {
        dp.cNamedArgs = 1;
        dp.rgdispidNamedArgs = &dispidNamed;
    }

    hr = pDisp->Invoke(dispID, IID_NULL, LOCALE_SYSTEM_DEFAULT, autoType, &dp, pvResult, NULL, NULL);
    va_end(marker);
    delete[] pArgs;
    return hr;
}

int main() {
    CoInitialize(NULL);

    CLSID clsid;
    CLSIDFromProgID(L"Excel.Application", &clsid);

    IDispatch* pExcelApp = NULL;
    HRESULT hr = CoCreateInstance(clsid, NULL, CLSCTX_LOCAL_SERVER, IID_IDispatch, (void**)&pExcelApp);

    if (SUCCEEDED(hr)) {
        cout << "Excel started!" << endl;

        // Make Excel visible
        VARIANT x;
        x.vt = VT_BOOL;
        x.boolVal = VARIANT_TRUE;
        AutoWrap(DISPATCH_PROPERTYPUT, NULL, pExcelApp, (LPOLESTR)L"Visible", 1, x);

        // Keep Excel open until user confirms
        cout << "Press Enter to close Excel..." << endl;
        cin.get();

        // Release Excel
        pExcelApp->Release();
    }
    else {
        cout << "Failed to start Excel." << endl;
    }
    CoUninitialize();
    return 0;
}








#include <windows.h>
#include <iostream>
using namespace std;

HRESULT AutoWrap(int autoType, VARIANT* pvResult, IDispatch* pDisp, LPOLESTR ptName, int cArgs...) {
    va_list marker;
    va_start(marker, cArgs);

    DISPID dispID;
    HRESULT hr = pDisp->GetIDsOfNames(IID_NULL, &ptName, 1, LOCALE_USER_DEFAULT, &dispID);
    if (FAILED(hr)) return hr;

    DISPPARAMS dp = { NULL, NULL, 0, 0 };
    dp.cArgs = cArgs;
    VARIANT* pArgs = new VARIANT[cArgs];
    for (int i = 0; i < cArgs; i++) {
        pArgs[i] = va_arg(marker, VARIANT);
    }
    dp.rgvarg = pArgs;

    DISPID dispidNamed = DISPID_PROPERTYPUT;
    if (autoType & DISPATCH_PROPERTYPUT) {
        dp.cNamedArgs = 1;
        dp.rgdispidNamedArgs = &dispidNamed;
    }

    hr = pDisp->Invoke(dispID, IID_NULL, LOCALE_SYSTEM_DEFAULT, autoType, &dp, pvResult, NULL, NULL);
    va_end(marker);
    delete[] pArgs;
    return hr;
}

int main() {
    CoInitialize(NULL);

    CLSID clsid;
    CLSIDFromProgID(L"Excel.Application", &clsid);

    IDispatch* pExcelApp = NULL;
    HRESULT hr = CoCreateInstance(clsid, NULL, CLSCTX_LOCAL_SERVER, IID_IDispatch, (void**)&pExcelApp);

    if (SUCCEEDED(hr)) {
        cout << "Excel started!" << endl;

        // Make Excel visible
        VARIANT x;
        x.vt = VT_BOOL;
        x.boolVal = VARIANT_TRUE;
        AutoWrap(DISPATCH_PROPERTYPUT, NULL, pExcelApp, (LPOLESTR)L"Visible", 1, x);

        // Keep Excel open until user confirms
        cout << "Press Enter to close Excel..." << endl;
        cin.get();

        // Release Excel
        pExcelApp->Release();
    }
    else {
        cout << "Failed to start Excel." << endl;
    }
    CoUninitialize();
    return 0;
}








#include <atlbase.h>   // Base ATL classes
#include <atlstr.h>    // CString
#include <iostream>
using namespace std;

int main() {
    // ATL provides CString class for handling strings
    CString msg(_T("Hello, World from ATL!"));

    // Print using standard C++ cout
    wcout << msg.GetString() << endl;

    return 0;
}






#include <atlbase.h>   // Base ATL classes
#include <atlstr.h>    // CString
#include <iostream>
using namespace std;

int main() {
    // ATL provides CString class for handling strings
    CString msg(_T("Hello, World from ATL!"));

    // Print using standard C++ cout
    wcout << msg.GetString() << endl;

    return 0;
}




ATLProject1.idl:

interface ICalculator : IDispatch {
    [id(1)] HRESULT Add([in] LONG a, [in] LONG b, [out, retval] LONG* result);
    [id(2)] HRESULT Subtract([in] LONG a, [in] LONG b, [out, retval] LONG* result);
};



Calculator.h:
public:
    STDMETHOD(Add)(LONG a, LONG b, LONG* result) {
        if (!result) return E_POINTER;
        *result = a + b;
        return S_OK;
    }

    STDMETHOD(Subtract)(LONG a, LONG b, LONG* result) {
        if (!result) return E_POINTER;
        *result = a - b;
        return S_OK;
    }







Open Developer Command Prompt (x64) as Administrator. 
Navigate to your ATL projectâ€™s output folder.
Run:
cd C:\Users\Monica\source\repos\ATLProject789\x64\Debug
C:\Windows\System32\regsvr32.exe ATLProject789.dll
regsvr32 ATLProject789.dll

Re clean the project, rebuild

