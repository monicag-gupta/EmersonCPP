#include <boost/regex.hpp>
#include <iostream>
using namespace std;
using namespace boost;

int main() {
    regex expr("(\\w+)@(\\w+).(\\w+)");
    string email = "test@example.com";
    if (regex_match(email, expr)) {
        cout << "Valid email: " << email<<" !!"<<endl;
    }
    else
        cout << "Invalid email address : " << email << endl;
}






#include <boost/scoped_ptr.hpp>
#include <iostream>
using namespace std;
class Emp {
public:
    Emp() {
        cout << "Emp constructed";
    }
    Emp(int x) {
        cout << "Emp constructed";
    }
    ~Emp() {
        cout << "Emp destructed";
    }
    string display() {
       return "I am an Emp Object";
    }
};
int main() {
    cout << "In scope:";
    {
        boost::scoped_ptr<Emp> p(new Emp());
        cout << endl << p->display() << endl;  // prints display()
        // no delete needed
    }
    cout << ":Out of Scope";
}





#include <boost/shared_ptr.hpp>
#include <iostream>
using namespace std;
class Emp {
public:
    int xx;
    Emp() {
        cout << "Emp constructed";
    }
    Emp(int x) {
        xx = x;
        cout << "Emp constructed";
    }
    ~Emp() {
        cout << "Emp destructed";
    }
    string display() {
       cout << xx;
       return " I am an Emp Object" ;
    }
};
int main() {
    cout << "In scope:";
    {
        boost::shared_ptr<Emp> p1(new Emp(20));
        boost::shared_ptr<Emp> p2 = p1; // shared ownership
        cout <<"\nP1:"<< p1->display() << "\nP2: " << p2->display() << endl;  // prints 20 20
        cout << "use_count = " << p1.use_count() << endl; // 2
    }
    cout << ":Out of Scope";
}






#include <boost/shared_ptr.hpp>
#include <boost/weak_ptr.hpp>

#include <iostream>
using namespace std;
class Emp {
public:
    int xx;
    Emp() {
        cout << "Emp constructed";
    }
    Emp(int x) {
        xx = x;
        cout << "Emp constructed";
    }
    ~Emp() {
        cout << "Emp destructed";
    }
    string display() {
       cout << xx;
       return " I am an Emp Object" ;
    }
};
int main() {
    cout << "In scope:";
    {
        boost::shared_ptr<Emp> sp(new Emp(20));
        boost::weak_ptr<Emp> wp = sp; // non-owning reference
        cout <<"\nsp:"<< sp->display() << "\nwp: " << (wp.lock())->display() << endl;  // prints 20 20
        cout << "use_count = " << sp.use_count() << endl; // 1
    }
    cout << ":Out of Scope";
}










#include <iostream>
#include <boost/shared_ptr.hpp>
class B; // forward declaration
class A {
public:
    boost::shared_ptr<B> ptrB;
    ~A() { std::cout << "A destroyed\n"; }
};
class B {
public:
    boost::shared_ptr<A> ptrA;
    ~B() { std::cout << "B destroyed\n"; }
};
int main() {
    {
        boost::shared_ptr<A> a(new A());
        boost::shared_ptr<B> b(new B());
        a->ptrB = b;  // A points to B
        b->ptrA = a;  // B points to A  (Cyclic reference!)
    } // scope ends, but destructors not called
    std::cout << "End of main\n";
    return 0;
}










#include <iostream>
#include <boost/shared_ptr.hpp>
#include <boost/weak_ptr.hpp>

class B; // forward declaration
class A {
public:
    boost::shared_ptr<B> ptrB;
    ~A() { std::cout << "A destroyed\n"; }
};
class B {
public:
    //boost::shared_ptr<A> ptrA;
    boost::weak_ptr<A> ptrA; // weak_ptr breaks cycle

    ~B() { std::cout << "B destroyed\n"; }
};
int main() {
    {
        boost::shared_ptr<A> a(new A());
        boost::shared_ptr<B> b(new B());
        a->ptrB = b;  // A points to B
        b->ptrA = a;  // B points to A  (Cyclic reference has been broken!)
    } // scope ends, and destructors are called
    std::cout << "End of main\n";
    return 0;
}










#include <boost/intrusive_ptr.hpp>
#include <iostream>
using namespace std;
class RefCounted {
    int refCount = 0;
public:
    friend void intrusive_ptr_add_ref(RefCounted* p) { ++p->refCount; }
    friend void intrusive_ptr_release(RefCounted* p) {
        if (--p->refCount == 0) delete p;
    }
    void hello() { cout << "Hello from RefCounted!" << endl; }
};
int main() {
    boost::intrusive_ptr<RefCounted> p(new RefCounted());
    p->hello();
}







#include <boost/make_shared.hpp>
#include <iostream>
using namespace std;
int main() {
    auto p = boost::make_shared<int>(42);
    cout << *p << endl;
}






#include <boost/filesystem.hpp>
#include <iostream>
namespace fs = boost::filesystem;
int main() {
    fs::path p("data.txt");
    if (fs::exists(p)) {
        std::cout << p << " exists\n";
        if (fs::is_regular_file(p))
            std::cout << "File size: " << fs::file_size(p) << " bytes\n";
        else if (fs::is_directory(p))
            std::cout << p << " is a directory\n";
    }
    else {
        std::cout << p << " does not exist\n";
    }
}




In Project folder create:
data.txt:
Hello, World!







