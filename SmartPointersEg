#include <memory>
#include <iostream>
using namespace std;
class Emp {
public:
    Emp() {
        cout << "Emp constructed";
    }
    Emp(int x) {
        cout << "Emp constructed";
    }
    ~Emp() {
        cout << "Emp destructed";
    }
    string display() {
        return "I am an Emp Object";
    }
};
int main() {
    cout << "In scope:";
    {
        unique_ptr<Emp> p(new Emp());
        cout << endl << p->display() << endl;  // prints display()
        // no delete needed
    }
    cout << ":Out of Scope";
}










#include <memory>
#include <iostream>
using namespace std;
class Emp {
public:
    int xx;
    Emp() {
        cout << "Emp constructed";
    }
    Emp(int x) {
        xx = x;
        cout << "Emp constructed";
    }
    ~Emp() {
        cout << "Emp destructed";
    }
    string display() {
        cout << xx;
        return " I am an Emp Object";
    }
};
int main() {
    cout << "In scope:";
    {
        shared_ptr<Emp> p1(new Emp(20));
        shared_ptr<Emp> p2 = p1; // shared ownership
        cout << "\nP1:" << p1->display() << "\nP2: " << p2->display() << endl;  // prints 20 20
        cout << "use_count = " << p1.use_count() << endl; // 2
    }
    cout << ":Out of Scope";
}






