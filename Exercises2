Design an array of 5 int elements:
98, 78, 56, 34, 11
“John Doe”, “Eric Gama”, “Jane Smith”, “Emission Grand”, “Treesa Vega”
Make a pointer (*n) point to the array
Now design a menu driven code with options:
1. Name1, id1
2. Name2
..
6. Exit
Should exit on choice 6.
According to choice, print the name by using pointer arithmetic. (single liner resolution of the menu items.




Solution:
#include <iostream>  
using namespace std;
int main()
{
    int a[] = { 98, 78, 56, 34, 11 };
    int ch;
    const char* name[5] = { "John Doe", "Eric Gama", "Jane Smith", "Emission Grand", "Treesa Vega" };
    while (true) {
        cout << "\n\n1.Name1\n2.Name2\n3.Name3\n4.Name4\n5.Name5\n6.Exit\nEnter Choice:";
        cin >> ch;
        if (ch >= 1 && ch <= 5)
            cout << "\nDetails at " << ch << " is Name: " << *(name + (ch-1)) << " Id : " << *(a + (ch-1)) << endl;
        else if (ch == 6)
            break;
        else
            cout << "Invalid choice" << endl;
    }

}







Design a calculator based on function pointer . Use pointer arithmetic to make an array of function pointers pointing to these functions.
Int Sum(int x, int y)
Int Sub(int, int)
Int mul(int, int)
Int Div(int, int)
Insert numbers
Display numbers


Solution:
#include <iostream>
using namespace std;

// Functions for operations
int Sum(int x, int y) {
    return x + y;
}

int Sub(int x, int y) {
    return x - y;
}

int Mul(int x, int y) {
    return x * y;
}

int Div(int x, int y) {
    if (y == 0) {
        cout << "Error: Division by zero!" << endl;
        return 0;
    }
    return x / y;
}

// Typedef for function pointer
//typedef int (*Operation)(int, int);

int main() {
    // Array of function pointers
    //Operation ops[4] = {Sum, Sub, Mul, Div};
   int (*ops[4])(int, int) = { Sum, Sub, Mul, Div };

    int choice, a, b;

    cout << "Simple Calculator using Function Pointers\n";
    cout << "1. Addition\n";
    cout << "2. Subtraction\n";
    cout << "3. Multiplication\n";
    cout << "4. Division\n";
    cout << "Enter choice (1-4): ";
    cin >> choice;

    cout << "Enter two numbers: ";
    cin >> a >> b;

    if (choice >= 1 && choice <= 4) {
        int result = ops[choice - 1](a, b);  // Call function using pointer
        cout << "Result = " << result << endl;
    } else {
        cout << "Invalid choice!" << endl;
    }

    return 0;
}


int (*ops[4])(int, int) = { Sum, Sub, Mul, Div };



Rewrite the distance program to print addition of two distances sent as parameter. 
#include<iostream>
// C++ program to pass structure as an argument  to the functions using Call By Value Method 
using namespace std;
struct Distance {
	int kilometer;
	int meter;
};
// accepts distance as its parameters 
void DisplayDistance(Distance d)
{
	cout << "Total distance:";
	cout << "kilometer: " << d.kilometer << endl;
	cout << "meter: " << d.meter << endl;
	d.meter = 500;
}
int main()
{
	Distance Distance1;
	// assigning values to structure elements 
	Distance1.kilometer = 10;
	Distance1.meter = 455;
	DisplayDistance(Distance1);
	cout << Distance1.meter;  //455
	return 0;
}



Solution : 
#include<iostream>
using namespace std;
struct Distance {
	int kilometer;
	int meter;
};
void TotalDistance(Distance d1, Distance d2) {
	Distance d;
	d.kilometer = d1.kilometer + d2.kilometer + (d1.meter + d2.meter) / 1000;
	d.meter = (d1.meter + d2.meter) % 1000;

	cout << "Total distance:";
	cout << "kilometer: " << d.kilometer << endl;
	cout << "meter: " << d.meter << endl;
}
// Function that initialises the value and calls TotalDistance function 
void initializeFunction() {
	Distance Distance1, Distance2;
	Distance1.kilometer = 10;
	Distance1.meter = 455;
	Distance2.kilometer = 9;
	Distance2.meter = 745;
	// calling function with (structure) distance as parameters 
	TotalDistance(Distance1, Distance2);
}
int main() {
	// Calling function to do required task 
	initializeFunction();
	return 0;
}











