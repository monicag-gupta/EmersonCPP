Create a Dynamic-Link Library (.dll) project : Dll1:
Properties -> C/C++ → Preprocessor → Preprocessor Definitions
Add MATHLIB_EXPORTS 
Ensure No PreCompiled Header files are used.
Build the project (Build → Build Dll1).

Link .dll into your main app project.


mathlibDLL.h

// mathlibDLL.h
#pragma once
#ifdef MATHLIB_EXPORTS
#define MATHLIB_API __declspec(dllexport)
#else
#define MATHLIB_API __declspec(dllimport)
#endif

extern "C" MATHLIB_API int add(int a, int b);



mathlibDLL.cpp

#include "mathlibDLL.h"
int add(int a, int b) { return a + b; }




Build → You’ll get:
mathlib.dll (runtime code)
mathlib.lib (import library for linking)
Your .exe (needs .dll at runtime)


In Main Project:

main.cpp

#include <iostream>
#include "../Dll1/mathlibDLL.h"
int main() {
    std::cout << add(5, 6) << "\n";
}









Export functions with __declspec(dllexport):
Open Solution Explorer → right-click MyLibrary → Properties (select the configuration you’ll use, e.g., Debug/x64 or All Configurations).
C/C++ → Preprocessor → Preprocessor Definitions
Add MYLIBRARY_EXPORTS (this causes __declspec(dllexport) to be used when building the DLL).
Ensure C/C++ → General → Additional Include Directories includes the folder where MyLibrary.h is (usually the project folder; default is fine).
Build the project (Build → Build MyLibrary).
You should now see:
MyLibrary.dll and MyLibrary.lib in the DLL project's output folder (e.g. MyLibrary\Debug\ or MyLibrary\x64\Debug\ depending on configuration/platform).
Import them in another project with __declspec(dllimport). 
Add Reference to DLL Project
Right-click MainApp → Add → Reference → Tick MathLib.
This automatically links MathLib.lib to your app.
Add Include Path
Right-click MainApp → Properties → Configuration Properties → C/C++ → General
Additional Include Directories → Add path to folder containing mathlib.h.




