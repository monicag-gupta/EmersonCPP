#include <iostream>
using namespace std;
int main () {
   int  var = 20;   // actual variable declaration.
   int  *ip;        // pointer variable

   ip = &var;       // store address of var in pointer variable

   cout << "Value of var variable: ";
   cout << var << endl;

   // print the address stored in ip pointer variable
   cout << "Address stored in ip variable: ";
   cout << ip << endl;   //address of var// in hexadecimal // 0x…

   // access the value at the address available in pointer
   cout << "Value of *ip variable: ";
   cout << *ip << endl;

   return 0;
}








#include <iostream>
using namespace std;

int main() {
    int arr[3] = {10, 20, 30};
    int* p = arr;

    cout << *p << endl;     // 10
    cout << *(p+1) << endl; // 20
    cout << *(p+2) << endl; // 30

    return 0;
}







#include <iostream>
using namespace std;

int main() {
    int* p = new int(50);   // allocate memory
    cout << "Value: " << *p << endl;

    delete p;  // free memory
    return 0;
}




#include <iostream>

using namespace std;
int main () {
   int  *ptr = NULL;
   cout << "The value of ptr is " << ptr <<endl ;
 
   return 0;
}





#include<iostream>
using namespace std;
int main() {
    int x = 42;
    int* p = &x;
    int** pp = &p;

    cout << "x = " << x << " with address : "<< &x <<endl;
    cout << "*p = " << *p <<" with address : " << p << endl;
    cout << "**pp = " << **pp << " with address : " << pp << endl;
    cout << " with address of pp : " << &pp << endl;


    **pp = 20;


    cout << "x = " << x << " with address : " << &x << endl;
    cout << "*p = " << *p << " with address : " << p << endl;
    cout << "**pp = " << **pp << " with address : " << pp << endl;
    cout << " with address of pp : " << &pp << endl;

    return 0;
}






#include <iostream>  
using namespace std;  
int main()  
{  
    int ptr1[5]; // integer array declaration  
    int *ptr2[5]; // integer array of pointer declaration  
    std::cout << "Enter five numbers :" << std::endl;  
    for(int i=0;i<5;i++)  
    {  
        std::cin >> ptr1[i];  
    }  
    for(int i=0;i<5;i++)  
    {  
        ptr2[i]=&ptr1[i];   
    }  
    // printing the values of ptr1 array  
    std::cout << "The values are" << std::endl;  
    for(int i=0;i<5;i++)  
    {  
        std::cout << *ptr2[i] << std::endl;  
    }  
 }  



#include <iostream>  
using namespace std;
int main()
{
    int* ptr;  // integer pointer declaration  
    int marks[10]; // marks array declaration  
    std::cout << "Enter the elements of an array :" << std::endl;
    for (int i = 0; i < 10; i++)
    {
        cin >> marks[i];
    }
    ptr = marks; // both marks and ptr pointing to the same element..  *ptr=marks[0], *(ptr +1) = marks[1]… 
    std::cout << "The value of *ptr is :" << *ptr << std::endl;
    std::cout << "The value of *marks is :" << *marks << std::endl;
    std::cout << "The value of marks[0] is :" << marks[0] << std::endl;
    std::cout << "The value of *ptr+1 is :" << *(ptr+1) << std::endl;
    std::cout << "The value of *marks+1 is :" << *(marks+1) << std::endl;
    std::cout << "The value of marks[1] is :" << marks[1] << std::endl;

}




#include <iostream>  
using namespace std;  
int main()  
{  
  char *names[5] = {"john",  
                    "Peter",  
                    "Marco",  
                    "Devin",  
                    "Ronan"};  
for(int i=0;i<5;i++)  
    {  
        std::cout << names[i] << std::endl;  
    }  
    return 0;  
}  





#include <iostream>
using namespace std;
void printArray(int arr[5]);
int main()
{
        int arr1[5] = { 10, 20, 30, 40, 50 };
        int arr2[5] = { 5, 15, 25, 35, 45 };
        printArray(arr1); //passing array to function
        printArray(arr2);
}
void printArray(int arr[5])
{
    cout << "Printing array elements:"<< endl;
    for (int i = 0; i < 5; i++)
    {
                   cout<<arr[i]<<"\n";
    }
}





#include <iostream>
using namespace std;
// function declaration:
double getAverage(int *arr, int size);
 
int main () {
   // an int array with 5 elements.
   int balance[5] = {1000, 2, 3, 17, 50};
   double avg;
   // pass pointer to the array as an argument.
   avg = getAverage( balance, 5 ) ;
   // output the returned value 
   cout << "Average value is: " << avg << endl; 
   return 0;
}
double getAverage(int *arr, int size) {
   int i, sum = 0;       
   double avg;          
   for (i = 0; i < size; ++i) {
      sum += arr[i];
   }
   avg = double(sum) / size;
   return avg;
}






#include <iostream>  
using namespace std;  
int main()  
{  
  void *ptr;   // void pointer declaration  
  int a=9;   // integer variable initialization  
  ptr=&a;   // storing the address of 'a' variable in a void pointer variable.  
  std::cout << &a << std::endl;  
  std::cout << ptr << std::endl;  
  return 0;  
}  







#include <iostream>
using namespace std;
void my_int_func(int x)
{
	cout << x << endl;
}

int main() {
	void (*foo)(int);
	foo = my_int_func;
	//In some case its address of function:
	//foo = &my_int_func;
	// call my_int_func (note that you do not need to write (*foo)(2) ) 
	foo(2);
	//but if you want to, you may 
	(*foo)(2);
	return 0;
}


int (*ops[4])(int, int) = { Sum, Sub, Mul, Div };

ops[1](3,4) -> Sub


int sum(int x, int y){return x+y;}

int (*sumPtr)(int, int)
sumPtr=sum;
sumPtr(3,4); // 7







#include <iostream>
using namespace std;

int main() {
    int x = 10;
    int y = 20;
    const int s = 30;
    const int t = 40;
    //int const pointers, pointers to constant variable:
    int const* sptr = &s;
    // constant pointer to int
    int* const p = &x;

    sptr = &t;
    //*sptr = 90;

    cout << "Initially: *p = " << *p << endl;
    // we can modify the value through the pointer
    *p = 15;
    cout << "After modifying *p: x = " << x << endl;
    // we cannot make p point somewhere else
    // p = &y;   // ERROR: assignment of read-only variable 'p'
    // but we can still modify x directly
    x = 30;
    cout << "After modifying x directly: *p = " << *p << endl;
    return 0;
}





#include <iostream>
using namespace std;
int main() {
    int a = 10;
    int b = 20;
    const int c = 30;
    // const pointer to const int
    const int* const p = &a;
    const int* const p2c = &c;
    cout << "Initially: *p = " << *p << endl;
    // cannot modify value through p
    // *p = 15;  // ERROR: assignment of read-only location
    // cannot reassign pointer
    // p = &b;   // ERROR: assignment of read-only variable 'p'
    // value can still be changed directly (not via pointer)
    a = 30;
    // value of c is also const, can not be changed
    // c = 90;
    cout << "After modifying a directly: *p = " << *p << endl;
    return 0;
}





int const* is pointer to const int
int *const is const pointer to int
int const* const is const pointer to const int
One way to remember the syntax (according to Bjarne Stroustrup) is the spiral rule
The rule says, start from the name of the variable and move clockwise to the next pointer or type. Repeat until expression ends.
The rule can also be seen as decoding the syntax from right to left.
Using this rule, even complex declarations can be decoded like,
int ** const is a const pointer to pointer to an int.
int * const * is a pointer to const pointer to an int.
int const ** is a pointer to a pointer to a const int.
int * const * const is a const pointer to a const pointer to an int.
int* p → normal pointer (can change pointer, can change value).
int* const p → const pointer (pointer cannot change, but value can).
const int* p → pointer to const (pointer can change, but value cannot through pointer).
const int* const p → const pointer to const (neither pointer nor value can change).







#include <iostream>
using namespace std;
struct Rectangle
{
	int width, height;
};
int main(void) {
	struct Rectangle rec;
	rec.width = 8;
	rec.height = 5;
	cout << "Area of Rectangle is: " << (rec.width * rec.height) << endl;
	return 0;
}




#include <iostream>
using namespace std;
struct student {
  int roll_no;
  string name;
  int phone_number;
};
int main(){
	struct student p1 = {1,"Brown",123443};
  	struct student p2;
  	p2 = p1;

  	cout << "roll no : " << p2.roll_no << endl;
  	cout << "name : " << p2.name << endl;
  	cout << "phone number : " << p2.phone_number << endl;
	return 0;
}




// C++ program to pass structure as an argument  to the functions using Call By Value Method 
using namespace std; 
struct Distance { 
	int kilometer; 
	int meter; 
}; 
// accepts distance as its parameters 
void DisplayDistance(Distance d)
{ 
	cout << "Total distance:"; 
	cout << "kilometer: "<< d.kilometer << endl; 
	cout << "meter: " << d.meter << endl; 
             d.meter=500;
} 
int main() 
{ 
             Distance Distance1; 
	// assigning values to structure elements 
	Distance1.kilometer = 10; 
	Distance1.meter = 455; 
             DisplayDistance(Distance1);
              cout<<Distance1.meter;  //455
	return 0; 
}






#include<iostream>
using namespace std;
struct Distance {
	int kilometer;
	int meter;
};
void display(Distance d) {
	cout << "Distance:" << " kilometer: " << d.kilometer << " meter: " << d.meter << endl;
}
Distance TotalDistance(Distance d1, Distance d2) {
	Distance d;
	d.kilometer = d1.kilometer + d2.kilometer + (d1.meter + d2.meter) / 1000;
	d.meter = (d1.meter + d2.meter) % 1000;

	cout << "Total distance:"<<endl;
	cout << "kilometer: " << d.kilometer << endl;
	cout << "meter: " << d.meter << endl;
	return d;
}
// Function that initialises the value and calls TotalDistance function 
void initializeFunction() {
	Distance Distance1, Distance2;
	Distance1.kilometer = 10;
	Distance1.meter = 455;
	Distance2.kilometer = 9;
	Distance2.meter = 745;
	// calling function with (structure) distance as parameters 
	Distance total = TotalDistance(Distance1, Distance2);
	cout << "\n\n";
	display(Distance1);
	cout << " + \n";
	display(Distance2);
	cout << " = \n";
	display(total);
}
int main() {
	// Calling function to do required task 
	initializeFunction();
	return 0;
}





#include <iostream> 
using namespace std; 
struct Point { 
	int x, y; 
}; 
int main()  { 
	struct Point p1 = { 1, 2 }; 

	// p2 is a pointer to structure p1 
	struct Point* p2 = &p1; 

	// Accessing structure members using 
	// structure pointer 
	cout << p2->x << " " << p2->y; 
	return 0; 
}











































