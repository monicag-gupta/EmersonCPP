Syntax:
cout << data; 
Example:
#include <iostream> 
using namespace std; 
int main() {
 	cout << "Hello, C++!" << endl; // endl = newline
 	cout << "Value: " << 42 << "\n"; // \n = newline
 	return 0;
} 
Key Points:
<< is the insertion operator (sends data to output stream).
Can chain multiple << operators.




Syntax:
cin >> variable; 
Example:
#include <iostream> 
using namespace std; 
int main() {
 	int age;
 	cout << "Enter your age: ";
 	cin >> age; // input from user
 	cout << "You entered: " << age << endl;
 	return 0; 
} 
Key Points:
>> is the extraction operator (takes data from input stream).
Stops reading at a whitespace for string unless you use getline().





#include <iostream> 
#include <string>  # study later : for using text sequences
using namespace std; 
int main() {
 	string name;
 	cout << "Enter your full name: ";
 	getline(cin, name); // reads full line including spaces
 	cout << "Hello, " << name << "!" << endl;
 	return 0; 
} 





For error messages (unbuffered, appears immediately):
cerr << "Error: Invalid input!" << endl; 




For logs/warnings (buffered output, flushed later):
clog << "Processing data..." << endl; 





#include <iostream> 
#include <string> 
using namespace std; 
int main() {
 	string name;
 	int age;
 	cout << "Enter your name: ";
 	getline(cin, name);
 	cout << "Enter your age: ";
 	cin >> age;
 	cout << "\n--- Output ---\n";
 	cout << "Name: " << name << "\n";
 	cout << "Age: " << age << "\n";
 	clog << "Info: Program executed successfully." << endl;
 	cerr << "Warning: This is just a demo error message." << endl;
 	return 0; 
} 







