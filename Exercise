I.a) Create a menu-driven Employee Management System in C++ that allows you to:
Add Employees (Name, ID, Salary).
Display All Employees.
Search Employee by ID.
Delete Employee by ID.
Use OOP concepts (classes, encapsulation, inheritance) and pointers (dynamic memory, object pointers).

Step-by-Step Plan
Define an Employee class with:
  Data members: id, name, salary.
  Functions: display().
Use inheritance: Create a Manager class that extends Employee (with an extra field department).
Use pointers:
  Dynamically allocate memory using new.
  Use delete to free memory when deleting employees.
  Create a Menu System for user interaction.
I.b) Use pointers:
  Store employees in an array of Employees.








II. Enhance the Features to Cover:
OOP (Encapsulation, Inheritance) – Employee, Manager
Pointers – Used in menu system
Smart Pointers (std & Boost) – shared_ptr, unique_ptr, boost::shared_ptr
Boost Regex – Input validation for names
Boost Filesystem – Save/load employee data
Dynamic memory management – via smart pointers (no manual delete needed)

Use Smart Pointers
Use std::unique_ptr<Employee> and std::shared_ptr<Employee> to store employees.
Show Boost smart pointers (boost::scoped_ptr, boost::shared_ptr) for comparison.

Use Boost Regex
Validate employee name (only alphabets allowed).
Validate employee ID (only numbers).

Use Boost Filesystem
Save employee data to a file.
Load employee data at startup.



Menu System
Add Employee / Manager
Display Employees
Search Employee by ID
Delete Employee by ID
Save/Load Data (Boost filesystem)




III. Enhance the exercise now to include:

OOP: Employee (base), Manager (derived, overrides display()).
Pointers: store polymorphic objects via std::shared_ptr<Employee>.
Smart pointers: std::shared_ptr, easy to add std::unique_ptr in factory.
Boost:
Regex for validating names/IDs.
Filesystem for save/load.
STL: vector, algorithms (sort, find_if, remove_if, accumulate).
Templates:
Generic Repository constrained with SFINAE: only types derived from Employee.
Generic utility functions (range printing, payroll).
Functors:
Comparators / predicates: BySalaryDesc, ByNameAsc, IdEquals.
SFINAE + type_traits:
Constrain templates to std::is_base_of<Employee, T>.
Detection of getSalary() via void_t trait for payroll utility.
static_assert checks to enforce polymorphic base.

Step-by-Step Plan
Define classes
Employee (id, name, salary), virtual display(), getters.
Manager : public Employee (+ department), override display().
Traits & SFINAE
is_employee<T> = std::is_base_of<Employee, T>.
has_getSalary<T> using std::void_t.
Constrain templates with std::enable_if_t.
Functors (function objects)
BySalaryDesc (for std::sort)
ByNameAsc
IdEquals (for std::find_if / remove_if)
Templates using STL
Repository<T> (stores std::vector<std::shared_ptr<T>>), only for T : Employee.
Generic printRange(It first, It last).
totalPayroll(vec) available only if T has getSalary().
Boost Regex & Filesystem
Validate ID (digits) and Name (letters/spaces).
Save/load CSV using boost::filesystem::path.
Menu
Add Employee/Manager.
Display all (with sorted views via functors).
Search by ID.
Delete by ID.
Save / Load.














.
