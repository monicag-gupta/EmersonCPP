#include <iostream>
using namespace std;
int max(int num1, int num2); /* function declaration */
int main () {
	int a = 100, b = 200, ret; /* local variable definition */
	ret = max(a, b); /* calling a function to get max value */
	cout<< "Max value is : "<< ret<<endl; //o/p: Max value is : 200
	return 0;
}
/* function returning the max between two numbers */
int max(int num1, int num2) {
	int result; /* local variable declaration */
	if (num1 > num2)
		result = num1;
	else
		result = num2;
	return result;
}



#include <iostream>
using namespace std;
// function declaration
void swap(int x, int y);
int main () {
   int a = 100;
   int b = 200;
   cout << "Before swap, value of a :" << a << endl;
   cout << "Before swap, value of b :" << b << endl;
   // calling a function to swap the values.
   swap(a, b);
   cout << "After swap, value of a :" << a << endl;
   cout << "After swap, value of b :" << b << endl;
   return 0;
}
// function definition to swap the values.
void swap(int x, int y) {
   int temp;
   temp = x; /* save the value of x */
   x = y;    /* put y into x */
   y = temp; /* put x into y */
   return;
}




#include <iostream>
using namespace std;
void swap(int *x, int *y); // function declaration
int main () {
   int a = 100;
   int b = 200;
   cout << "Before swap, value of a :" << a << endl;
   cout << "Before swap, value of b :" << b << endl;
   // calling a function to swap the values.
   swap(&a, &b);
   cout << "After swap, value of a :" << a << endl;
   cout << "After swap, value of b :" << b << endl;
   return 0;
}
// function definition to swap the values.
void swap(int *x, int *y) {
   int temp;
   temp = *x; /* save the value at address x */
   *x = *y; /* put y into x */
   *y = temp; /* put x into y */
   return;
}





#include <iostream>
using namespace std;
// function declaration
void swap(int &x, int &y);
int main () {
   int a = 100;
   int b = 200;
   cout << "Before swap, value of a :" << a << endl;
   cout << "Before swap, value of b :" << b << endl;
   // calling a function to swap the values.
   swap(a, b);
   cout << "After swap, value of a :" << a << endl;
   cout << "After swap, value of b :" << b << endl;
   return 0;
}
// function definition to swap the values.
void swap(int &x, int &y) {
   int temp;
   temp = x; /* save the value at address x */
   x = y;    /* put y into x */
   y = temp; /* put x into y */
   return;
}



#include <iostream>
using namespace std;
int sum(int a) {
    cout << "\nsum(" << a << ")";
    if (a <= 1) {
        return 1;
    }
    else
        return a + sum(a - 1);
}

int main() {

    sum(5);
    return 0;
}





#include <iostream>
using namespace std; 
int sum(int a, int b = 20) {
   int result;
   result = a + b;
   return (result);
}
int main () {
   int a = 100;
   int b = 200;
   int result;
 
   // calling a function to add the values.
   result = sum(a, b);
   cout << "Total value is :" << result << endl;
   // calling a function again as follows.
   result = sum(a);
   cout << "Total value is :" << result << endl;
 
   return 0;
}




Passing variable number of arguments: varargs:

Variable number of parameters has two parts:
an int which will represent the total number variable arguments passed
And last argument as ellipses, i.e. three dotes (...) representing the variable number of parameters 
To use such functionality, you need to make use of stdarg.h header file which provides the functions and macros to implement the functionality of variable arguments:
va_list type variable representing the variable list
va_start macro to initialize the va_list variable to an argument list
va_arg macro to access each item in argument list
macro va_end to clean up the memory assigned to va_list variable


#include <iostream>
#include <stdarg.h>
using namespace std;

double average(int num,...) {
   va_list valist;
   double sum = 0.0;
   int i;
   /* initialize valist for num number of arguments */
   va_start(valist, num);
   /* access all the arguments assigned to valist */
   for (i = 0; i < num; i++) {
      sum += va_arg(valist, int);
   }
   /* clean memory reserved for valist */
   va_end(valist);
   return sum/num;
}
int main() {
   cout<<"Average of 2, 3, 4, 5 = \n"<< average(4, 2,3,4,5)<<endl;
   cout<<"Average of 5, 10, 15 = \n"<< average(3, 5,10,15)<<endl;
}




