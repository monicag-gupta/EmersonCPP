#include <iostream>
using namespace std;
class Emp {  //class : Encapsulated as a meta Information
private:  //attributes  // Encapsulation or data hiding
	char *name;
	int sal;
public:	//behaviour //Abstraction
	void setData(char *nm, int s) {
		name = nm;
		sal = s;
	}
	void print() {
		cout << "Name : \"" << name << "\" Salary : " << sal << endl;
	}
};
int main() {
	//Object creation
	Emp e1;
	e1.setData((char *)"Ishu", 50000);  //member function call
	e1.print();
	return 0;
}





#include <iostream>
using namespace std;
class A {   //Encapsulated: Data Collected in single unit
private:		//Encapsulated: Data Hidden
	int a;
protected:
	int b;
public:			//Abstracted Data
	int getA() { return a; }
	void setA(int x) { a = x; }
	int getB() { return b; }
	void setB(int x) { b = x; }
};
class B :public A {
public:
	void print()	{
		setB(5);
		cout << b;
		//cout << a;    //inaccessible, not inherited
	}
};
int main() {
	B b;
	b.print();   
	return 0;
}




#include <iostream>  
using namespace std;  
 class Animal {  
   public:  
 void eat() {   
    cout<<"Eating..."<<endl;   
 }    
   };  
   class Dog: public Animal    
   {    
       public:  
     void bark(){  
    cout<<"Barking...";   
     }    
   };   
int main(void) {  
    Dog d1;  
    d1.eat();  
    d1.bark();  
    return 0;  
} 



#include <iostream>  
using namespace std;  
 class Animal {  
   public:  
 void eat() {   
    cout<<"Eating..."<<endl;   
 }    
   };  
   class Dog: private Animal    
   {    
       public:  
     void bark(){  
        eat();
    cout<<"Barking...";   
     }    
   };   
int main(void) {  
    Dog d1;  
    //d1.eat();  //not allowed
    d1.bark();  
    return 0;  
} 




#include <iostream>  
using namespace std;  
 class Animal {  
   public:  
 void eat() {   
    cout<<"Eating..."<<endl;   
 }    
   };  
   class Dog: public Animal     {    
       public:  
     void bark(){  
    cout<<"Barking..."<<endl;   
     }    
   };   
   class BabyDog: public Dog      {    
       public:  
     void weep() {  
    cout<<"Weeping...";   
     }    
   };   
int main(void) {  
    BabyDog d1;  
    d1.eat();  
    d1.bark();  
     d1.weep();  
     return 0;  
} 




#include <iostream>  
using namespace std;  
 class Animal {  
   public:  
 void eat() {   
    cout<<"Eating..."<<endl;   
 }    
   };  
   class Dog: protected Animal     {    
       public:  
     void bark(){  
    cout<<"Barking..."<<endl;   
     }    
   };   
   class BabyDog: public Dog      {    
       public:  
     void weep() {  
       eat();
    cout<<"Weeping...";   
     }    
   };   
int main(void) {  
    BabyDog d1;  
    //d1.eat();  
    d1.bark();  
     d1.weep();  
     return 0;  
} 




#include <iostream>  
using namespace std;  
 class Animal {  
   public:  
 void eat() {   
    cout<<"Eating..."<<endl;   
 }    
   };  
   class Dog: private Animal     {    
       public:  
     void bark(){  
    cout<<"Barking..."<<endl;   
     }    
   };   
   class BabyDog: public Dog      {    
       public:  
     void weep() {  
      // eat();
    cout<<"Weeping...";   
     }    
   };   
int main(void) {  
    BabyDog d1;  
    //d1.eat();  
    d1.bark();  
     d1.weep();  
     return 0;  
} 




#include <iostream>  
using namespace std;  
 class Animal {  
   public:  
 void eat() {   
    cout<<"Eating..."<<endl;   
 }    
   };  
   class Dog: private Animal     {    
       public:  
     void bark(){  
    cout<<"Barking..."<<endl;   
     }    
   };   
   class BabyDog: public Dog      {    
       public:  
     void weep() {  
      // eat();
    cout<<"Weeping...";   
     }    
   };   
int main(void) {  
    BabyDog d1;  
    //d1.eat();  
    d1.bark();  
     d1.weep();  
     return 0;  
} 





#include <iostream>  
using namespace std;  
class A {  
    protected:  
     int a;  
    public:  
    void get_a(int n)      {          a = n;      }  
};    
class B  {  
    protected:  
    int b;  
    public:  
    void get_b(int n)      {          b = n;      }  
};  
class C : public A, public B  {  
   public:  
    void display()      {  
        std::cout << "The value of a is : " <<a<< std::endl;  
        std::cout << "The value of b is : " <<b<< std::endl;  
        cout<<"Addition of a and b is : "<<a+b;  
    }  
};  
int main()  {  
   C c;  
   c.get_a(10);  
   c.get_b(20);  
   c.display();  
   return 0;  
} 








#include <iostream>  
using namespace std;  
class A  {  
    public:  
    void display()      {  
        std::cout << "Class A" << std::endl;  
    }  
};  
class B  {  
    public:  
    void display()      {  
        std::cout << "Class B" << std::endl;  
    }  
};  
class C : public A, public B  {  
    void view()      {  
       // display();  
    }  
};  
int main()  {  
    C c;  
  //  c.display();  
    return 0;  
} 



#include <iostream>  
using namespace std;  
class A  {  
    public:  
    void display()      {  
        std::cout << "Class A" << std::endl;  
    }  
};  
class B  {  
    public:  
    void display()      {  
        std::cout << "Class B" << std::endl;  
    }  
};  
class C : public A, public B  {  
    void view()      {  
        A :: display();         // Calling the display() function of class A.  
        B :: display();         // Calling the display() function of class B.  
     }  
}; int main()  {  
    C c;  
    c.view();  
    return 0;  
} 



#include <iostream>  using namespace std;  
class A  {  
    protected:      int a;  
    public:  
    void get_a()      {  
       std::cout << "Enter the value of 'a' : " << std::endl;    cin>>a;  
    }  };  
class B : public A   {  
    protected:      int b;  
    public:  
    void get_b()      {  
        std::cout << "Enter the value of 'b' : " << std::endl;      cin>>b;      }  
};  
class C   {  
    protected:      int c;  
    public:  
    void get_c()      {  
        std::cout << "Enter the value of c is : " << std::endl;    cin>>c;      }  
};    
class D : public B, public C  {  
    protected:  
    int d;  
    public:  
    void mul()      {  
         get_a();           get_b();           get_c();  
         std::cout << "Multiplication of a,b,c is : " <<a*b*c<< std::endl;      }  	};  
int main()  {  
    D d;  
    d.mul();  
    return 0;  } 





#include <iostream>  
using namespace std;  
class Shape     {            // Declaration of base class.   
    public:  
    int a;  
    int b;  
    void get_data(int n,int m)      {  
        a= n;  
        b = m;  
    }  
};  
class Rectangle : public Shape  {  // inheriting Shape class  
    public:  
    int rect_area()     {  
        int result = a*b;  
        return result;  
    }  
};  
class Triangle : public Shape  {  // inheriting Shape class  
    public:  
    int triangle_area()      {  
        float result = 0.5*a*b;  
        return result;  
    }  
}; 
int main()  
{  
    Rectangle r;  
    Triangle t;  
    int length,breadth,base,height;  
    std::cout << "Enter the length and breadth of a rectangle: " << std::endl;  
    cin>>length>>breadth;  
    r.get_data(length,breadth);  
    int m = r.rect_area();  
    std::cout << "Area of the rectangle is : " <<m<< std::endl;  
    std::cout << "Enter the base and height of the triangle: " << std::endl;  
    cin>>base>>height;  
    t.get_data(base,height);  
    float n = t.triangle_area();  
    std::cout <<"Area of the triangle is : "  << n<<std::endl;  
    return 0;  
}  



#include <iostream>
using namespace std;
class A {   
public:			
	int a = 9;
	void print()	{cout << "This prints class attribute a: " << a<<endl; 	}
	void print(int x)	{
		cout << "This print current parameter as int x: " << x<<endl;	}
             void print(char x)	{
		cout << "This print current parameter as char x: " << x<<endl;	}
	void print(int x, float f)	{
		cout << "This print product of x and f: " << x*f<<endl;	}
	void print(float f, int x)	{
		cout << "This print division of f / x: " << f/x<<endl;	}
};
int main() {
	A a;
	a.print();
	a.print(4); 	a.print('A');
	a.print(5, 6.7);	a.print(10.5, 2);
	return 0;
}





#include <iostream>
using namespace std;
class A {   
public:			
	int a = 9;
	void print()
	{
		cout << "This prints class attribute a: " << a<<endl;
	}
};
class B : public A
{
public:
	void print()
	{	cout << "This prints square of class attribute a: " << a*a << endl;
	}
};
int main() {
	A a;
	a.print();
	B b;
	b.print();
	return 0;
}






#include <iostream>
using namespace std;
class A {
public:
	int a = 9;
	void print(int x) 	{
		cout << "This prints class attribute a: " << a<<endl;
		cout << "and x : " << x<<endl;
	}
};
class B : public A
{
public:
	void print(float x) 	{
		cout << "This prints square of class attribute a: " << a*a << endl;
		cout << "and x : " << x << endl;
	}
};
int main() {
	A a;
	a.print(5);
	B b;
	//b.print(4);
	b.print((float)3.6);
	return 0;
}





#include <iostream>
using namespace std;
class A {   
public:			
	int a;
	A()	{	a = 0;	}  //Default Constructor
	A(int x)	{	a = x;	}   //Parameterized Constructor
};

int main() {
	A *a=new A();
	A *b = new A(10);
	cout << "Default Constructor gives a=" << a->a<<endl;
	cout << "Parameterized constructor gives a=" << b->a<<endl;
	
	return 0;
}





//#include "stdafx.h"  //for earlier versions of Visual Studio.
#include <iostream>
using namespace std;
class A {   
public:			
	int a;
	A()		{	a = 10;	}  //Constructor
	~A() { a = 0;	cout << "Destructor Called"<<endl; }   //Destructor
};

int main() {
	A *a=new A();
	cout << "Default Constructor gives a=" << a->a<<endl;
	delete a;
	return 0;
}





#include<iostream>
using namespace std;
class Complex {
private:
    int real, imag;
public:
    Complex(int r = 0, int i =0)  {real = r;   imag = i;}
    // This is automatically called when '+' is used with between two Complex objects
    Complex operator + (Complex const &obj) {
         Complex res;
         res.real = real + obj.real;
         res.imag = imag + obj.imag;
         return res;
    }
    void print() { cout << real << " + i" << imag << endl; }
};
int main() {
    Complex c1(10, 5), c2(2, 4);
    Complex c3 = c1 + c2; // An example call to "operator+"
    c3.print();
}






#include<iostream>
using namespace std;
class Person {
public:
	Person(int x) { cout << "Person::Person(int ) called" << endl; }
};
class Faculty : public Person {
public:
	Faculty(int x) :Person(x) {
		cout << "Faculty::Faculty(int ) called" << endl;
	}
};
class Student : public Person {
public:
	Student(int x) :Person(x) {
		cout << "Student::Student(int ) called" << endl;
	}
};
class TA : public Faculty, public Student {
public:
	TA(int x) :Student(x), Faculty(x) {
		cout << "TA::TA(int ) called" << endl;
	}
};
int main() {
	TA ta1(30);
}







#include<iostream>
using namespace std;
class Person {
public:
	Person(int x) { cout << "Person::Person(int ) called" << endl; }
	Person() { cout << "Person::Person() called" << endl; }
};
class Faculty : virtual public Person {
public:
	Faculty(int x) :Person(x) {
		cout << "Faculty::Faculty(int ) called" << endl;
	}
};
class Student : virtual public Person {
public:
	Student(int x) :Person(x) {
		cout << "Student::Student(int ) called" << endl;
	}
};
class TA : public Faculty, public Student {
public:
	TA(int x) :Student(x), Faculty(x) {
		cout << "TA::TA(int ) called" << endl;
	}
};
int main() {
	TA ta1(30);
}






#include<iostream>
using namespace std;
class Person {
public:
    Person(int x) { cout << "Person::Person(int ) called" << endl; }
    Person() { cout << "Person::Person() called" << endl; }
};
class Faculty : virtual public Person {
public:
    Faculty(int x) :Person(x) {
        cout << "Faculty::Faculty(int ) called" << endl;
    }
};
class Student : virtual public Person {
public:
    Student(int x) :Person(x) {
        cout << "Student::Student(int ) called" << endl;
    }
};
class TA : public Faculty, public Student {
public:
    TA(int x) :Student(x), Faculty(x), Person(x) {
        cout << "TA::TA(int ) called" << endl;
    }
};
int main() {
    TA ta1(30);
}









#include <iostream> 
using namespace std;
class Shape {
   protected:
      int width, height;
   public:
      Shape( int a = 0, int b = 0){
         width = a;
         height = b;
      }
      int area() {
         cout << "Parent class area :" <<endl;
         return 0;
      }
};
class Rectangle: public Shape {
   public:
      Rectangle( int a = 0, int b = 0):Shape(a, b) { }
        int area () { 
         cout << "Rectangle class area :" <<endl;
         return (width * height); 
      }
};

class Triangle: public Shape {
   public:
      Triangle( int a = 0, int b = 0):Shape(a, b) { }
      int area () { 
         cout << "Triangle class area :" <<endl;
         return (width * height / 2); 
      }
};
int main() {
   Shape *shape;
   Rectangle rec(10,7);
   Triangle  tri(10,5);

   // store the address of Rectangle
   shape = &rec;
    // call rectangle area.
   cout<<shape->area()<<endl;

   // store the address of Triangle
   shape = &tri;
    // call triangle area.
   cout<<shape->area()<<endl;
   
   return 0;
}







#include <iostream> 
using namespace std;
class Shape {
protected:
    int width, height;
public:
    Shape(int a = 0, int b = 0) {
        width = a;
        height = b;
    }
    virtual int area() {
        cout << "Parent class area :" << endl;
        return 0;
    }
};
class Rectangle : public Shape {
public:
    Rectangle(int a = 0, int b = 0) :Shape(a, b) {}
    int area() {
        cout << "Rectangle class area :" << endl;
        return (width * height);
    }
};

class Triangle : public Shape {
public:
    Triangle(int a = 0, int b = 0) :Shape(a, b) {}
    int area() {
        cout << "Triangle class area :" << endl;
        return (width * height / 2);
    }
};
int main() {
    Shape* shape;
    Rectangle rec(10, 7);
    Triangle  tri(10, 5);

    // store the address of Rectangle
    shape = &rec;
    // call rectangle area.
    cout << shape->area() << endl;

    // store the address of Triangle
    shape = &tri;
    // call triangle area.
    cout << shape->area() << endl;

    return 0;
}








#include <iostream> 
using namespace std;
class Shape {
protected:
    int width, height;
public:
    Shape(int a = 0, int b = 0) {
        width = a;
        height = b;
    }
    virtual int area() = 0; //pure virtual function
};
class Rectangle : public Shape {
public:
    Rectangle(int a = 0, int b = 0) :Shape(a, b) {}
    int area() {
        cout << "Rectangle class area :" << endl;
        return (width * height);
    }
};

class Triangle : public Shape {
public:
    Triangle(int a = 0, int b = 0) :Shape(a, b) {}
    int area() {
        cout << "Triangle class area :" << endl;
        return (width * height / 2);
    }
};
int main() {
    Shape* shape;
    Rectangle rec(10, 7);
    Triangle  tri(10, 5);

    // store the address of Rectangle
    shape = &rec;
    // call rectangle area.
    cout << shape->area() << endl;

    // store the address of Triangle
    shape = &tri;
    // call triangle area.
    cout << shape->area() << endl;

    return 0;
}











#include<iostream>
using namespace std;
class Animal {
public:
	//virtual 
    void eat() {
		cout << "All animals eat";
	}
};

class Dog : public Animal {
public:
	void eat() {
		cout << "Dog eats";
	}
	void bark() {
		cout << "Bow Bow";
	}
};

class Cat : public Animal {
public:
	void eat() {
		cout << "Cat eats";
	}
	void meow() {
		cout << "Meow Meow";
	}
};

void animalTrainer(Animal* a) {
	a->eat();
}
int main() {
	Dog d;
	animalTrainer(&d);
}

















