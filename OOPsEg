#include <iostream>
using namespace std;
class Emp {  //class : Encapsulated as a meta Information
private:  //attributes  // Encapsulation or data hiding
	char *name;
	int sal;
public:	//behaviour //Abstraction
	void setData(char *nm, int s) {
		name = nm;
		sal = s;
	}
	void print() {
		cout << "Name : \"" << name << "\" Salary : " << sal << endl;
	}
};
int main() {
	//Object creation
	Emp e1;
	e1.setData((char *)"Ishu", 50000);  //member function call
	e1.print();
	return 0;
}





#include <iostream>
using namespace std;
class A {   //Encapsulated: Data Collected in single unit
private:		//Encapsulated: Data Hidden
	int a;
protected:
	int b;
public:			//Abstracted Data
	int getA() { return a; }
	void setA(int x) { a = x; }
	int getB() { return b; }
	void setB(int x) { b = x; }
};
class B :public A {
public:
	void print()	{
		setB(5);
		cout << b;
		//cout << a;    //inaccessible, not inherited
	}
};
int main() {
	B b;
	b.print();   
	return 0;
}




#include <iostream>  
using namespace std;  
 class Animal {  
   public:  
 void eat() {   
    cout<<"Eating..."<<endl;   
 }    
   };  
   class Dog: public Animal    
   {    
       public:  
     void bark(){  
    cout<<"Barking...";   
     }    
   };   
int main(void) {  
    Dog d1;  
    d1.eat();  
    d1.bark();  
    return 0;  
} 



#include <iostream>  
using namespace std;  
 class Animal {  
   public:  
 void eat() {   
    cout<<"Eating..."<<endl;   
 }    
   };  
   class Dog: private Animal    
   {    
       public:  
     void bark(){  
        eat();
    cout<<"Barking...";   
     }    
   };   
int main(void) {  
    Dog d1;  
    //d1.eat();  //not allowed
    d1.bark();  
    return 0;  
} 




#include <iostream>  
using namespace std;  
 class Animal {  
   public:  
 void eat() {   
    cout<<"Eating..."<<endl;   
 }    
   };  
   class Dog: public Animal     {    
       public:  
     void bark(){  
    cout<<"Barking..."<<endl;   
     }    
   };   
   class BabyDog: public Dog      {    
       public:  
     void weep() {  
    cout<<"Weeping...";   
     }    
   };   
int main(void) {  
    BabyDog d1;  
    d1.eat();  
    d1.bark();  
     d1.weep();  
     return 0;  
} 




#include <iostream>  
using namespace std;  
 class Animal {  
   public:  
 void eat() {   
    cout<<"Eating..."<<endl;   
 }    
   };  
   class Dog: protected Animal     {    
       public:  
     void bark(){  
    cout<<"Barking..."<<endl;   
     }    
   };   
   class BabyDog: public Dog      {    
       public:  
     void weep() {  
       eat();
    cout<<"Weeping...";   
     }    
   };   
int main(void) {  
    BabyDog d1;  
    //d1.eat();  
    d1.bark();  
     d1.weep();  
     return 0;  
} 




#include <iostream>  
using namespace std;  
 class Animal {  
   public:  
 void eat() {   
    cout<<"Eating..."<<endl;   
 }    
   };  
   class Dog: private Animal     {    
       public:  
     void bark(){  
    cout<<"Barking..."<<endl;   
     }    
   };   
   class BabyDog: public Dog      {    
       public:  
     void weep() {  
      // eat();
    cout<<"Weeping...";   
     }    
   };   
int main(void) {  
    BabyDog d1;  
    //d1.eat();  
    d1.bark();  
     d1.weep();  
     return 0;  
} 




#include <iostream>  
using namespace std;  
 class Animal {  
   public:  
 void eat() {   
    cout<<"Eating..."<<endl;   
 }    
   };  
   class Dog: private Animal     {    
       public:  
     void bark(){  
    cout<<"Barking..."<<endl;   
     }    
   };   
   class BabyDog: public Dog      {    
       public:  
     void weep() {  
      // eat();
    cout<<"Weeping...";   
     }    
   };   
int main(void) {  
    BabyDog d1;  
    //d1.eat();  
    d1.bark();  
     d1.weep();  
     return 0;  
} 





#include <iostream>  
using namespace std;  
class A {  
    protected:  
     int a;  
    public:  
    void get_a(int n)      {          a = n;      }  
};    
class B  {  
    protected:  
    int b;  
    public:  
    void get_b(int n)      {          b = n;      }  
};  
class C : public A, public B  {  
   public:  
    void display()      {  
        std::cout << "The value of a is : " <<a<< std::endl;  
        std::cout << "The value of b is : " <<b<< std::endl;  
        cout<<"Addition of a and b is : "<<a+b;  
    }  
};  
int main()  {  
   C c;  
   c.get_a(10);  
   c.get_b(20);  
   c.display();  
   return 0;  
} 








#include <iostream>  
using namespace std;  
class A  {  
    public:  
    void display()      {  
        std::cout << "Class A" << std::endl;  
    }  
};  
class B  {  
    public:  
    void display()      {  
        std::cout << "Class B" << std::endl;  
    }  
};  
class C : public A, public B  {  
    void view()      {  
       // display();  
    }  
};  
int main()  {  
    C c;  
  //  c.display();  
    return 0;  
} 



#include <iostream>  
using namespace std;  
class A  {  
    public:  
    void display()      {  
        std::cout << "Class A" << std::endl;  
    }  
};  
class B  {  
    public:  
    void display()      {  
        std::cout << "Class B" << std::endl;  
    }  
};  
class C : public A, public B  {  
    void view()      {  
        A :: display();         // Calling the display() function of class A.  
        B :: display();         // Calling the display() function of class B.  
     }  
}; int main()  {  
    C c;  
    c.view();  
    return 0;  
} 



#include <iostream>  using namespace std;  
class A  {  
    protected:      int a;  
    public:  
    void get_a()      {  
       std::cout << "Enter the value of 'a' : " << std::endl;    cin>>a;  
    }  };  
class B : public A   {  
    protected:      int b;  
    public:  
    void get_b()      {  
        std::cout << "Enter the value of 'b' : " << std::endl;      cin>>b;      }  
};  
class C   {  
    protected:      int c;  
    public:  
    void get_c()      {  
        std::cout << "Enter the value of c is : " << std::endl;    cin>>c;      }  
};    
class D : public B, public C  {  
    protected:  
    int d;  
    public:  
    void mul()      {  
         get_a();           get_b();           get_c();  
         std::cout << "Multiplication of a,b,c is : " <<a*b*c<< std::endl;      }  	};  
int main()  {  
    D d;  
    d.mul();  
    return 0;  } 





#include <iostream>  
using namespace std;  
class Shape     {            // Declaration of base class.   
    public:  
    int a;  
    int b;  
    void get_data(int n,int m)      {  
        a= n;  
        b = m;  
    }  
};  
class Rectangle : public Shape  {  // inheriting Shape class  
    public:  
    int rect_area()     {  
        int result = a*b;  
        return result;  
    }  
};  
class Triangle : public Shape  {  // inheriting Shape class  
    public:  
    int triangle_area()      {  
        float result = 0.5*a*b;  
        return result;  
    }  
}; 




